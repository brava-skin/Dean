# =========================================
# Brava Dayparting & Calendar Configuration
# =========================================
version: 1
enabled: true
timezone: "Europe/Amsterdam"    # align with your ad account timezone (delivery & reporting)
notes: |
  Dayparting controls pausing/throttling by stage (Testing/Validation/Scaling),
  with metric-based triggers, minimum-sample guards, ramp up/down, holidays,
  budget coordination, experimentation holdouts, and full audit/ops hooks.
  NOTE: Previous schedules were defined in America/Chicago. Hours below have been
  shifted +7h to match the same real-world windows in Europe/Amsterdam.

# -------------------------
# Global defaults & guards
# -------------------------
global:
  # Metrics & floors to avoid acting on noise
  metrics:
    thresholds:
      ctr_floor_pct: 0.30         # used as default floor when evaluating "dead hours" (0.30% CTR)
      cvr_floor_pct: 0.50         # optional; % of clicks that become ATC/initiate checkout (if available)
      roas_min: 1.20
      cpa_max: 40.0
    rolling_windows:
      short_hours: 24             # compute recent metrics on last 24h
      long_hours: 72              # and last 72h for stability reference
    consecutive_ticks: 2          # require N consecutive evaluations before acting (stability gate)

  # Sample minimums before any pause/throttle decision
  minimums:
    impressions: 500
    clicks: 20
    spend_eur: 15                 # was spend_usd

  # Ramp behavior to avoid abrupt on/off
  ramp:
    enable_ramp: true
    ramp_down_minutes: 20         # before pause/throttle, gradually reduce over this period
    ramp_up_minutes: 20           # after unpause, gradually increase over this period

  # Safety & guardrails
  safety:
    fail_safe_unpause_hours: 6    # auto-unpause anything paused longer than N hours
    account_guardrails:
      respect_account_cpa_tripwire: true   # if account guardrail is active, prefer not to pause more
      respect_no_purchase_tripwire: true
    daily_stage_caps:
      enforce: true
      testing_eur: 100            # was testing_usd
      validation_eur: 400         # was validation_usd
      scaling_eur: 2500           # was scaling_usd

  # Holidays / blackout dates (local to `timezone`)
  calendar:
    blackout_dates:               # YYYY-MM-DD — skip pauses/throttles on these dates
      - "2025-11-28"              # Black Friday (example)
      - "2025-12-02"              # Cyber Monday (example)
    allow_launches_on_blackout: false   # prevent NEW launches during blackouts

  # Experimentation (holdout to measure net lift of dayparting)
  experimentation:
    enabled: true
    holdout_pct: 0.20             # 20% of eligible entities will not be paused/throttled
    sampling_seed: 42

  # Ops & observability
  ops:
    slack:
      enabled: true
      route:
        info: "default"
        warn: "default"
        error: "default"
      templates:
        pause:   "[{stage}] ⏸️ Paused {count} entity(ies) {window_desc} — reason: {reason} (CTR {ctr:.2%}, ROAS {roas:.2f})"
        throttle:"[{stage}] 🔻 Throttled {count} entity(ies) to {throttle_pct}% {window_desc} — reason: {reason}"
        unpause: "[{stage}] ▶️ Unpaused {count} entity(ies) — window ended or metrics recovered"
        digest:  "📊 Dayparting digest {date} — TEST: {test}, VALID: {valid}, SCALE: {scale}"
    simulation:
      enabled: true               # if true, runner can preview actions without writing
      hours_to_simulate: 168      # last 7 days
    audit:
      json_log_enabled: true
      json_log_path: "data/dayparting_actions.log.jsonl"

  # Naming compliance & targeting (shared policy)
  compliance:
    enforce_naming: true
    stage_prefixes:
      testing:   "^[[]TEST[]]"
      validation:"^[[]VALID[]]"
      scaling:   "^[[]SCALE[]]"

# -------------------------
# Stage-specific policies
# -------------------------
stages:

  testing:
    enabled: true

    # Schedules (local hours at `timezone` = Europe/Amsterdam)
    schedules:
      # default weekday pattern (Mon–Fri)
      weekdays:
        pause_hours_local: [9,10,11,12,13]    # shifted from 02–06 Chicago → 09–13 Amsterdam
        launch_block_hours_local: []          # prevent NEW launches in these hours (leave empty to allow)
      # weekend pattern (Sat–Sun)
      weekend:
        pause_hours_local: [10,11,12,13]     # shifted from 03–06 Chicago → 10–13 Amsterdam
        launch_block_hours_local: []

      # Per-day-of-week overrides (0=Mon … 6=Sun). Any present entry overrides weekday/weekend defaults.
      per_dow: { }

    # Triggers to *enter* pause/throttle during schedule windows
    triggers:
      use_metrics: true
      ctr_floor_pct: 0.30               # 0.30% during dead hours
      roas_min: 1.20
      cpa_max: 40.0
      require_minimums: true            # also require the global minimum samples
      use_rolling_windows: true         # evaluate both 24h and 72h windows

    # Actions to take during windows
    actions:
      mode: "pause"                     # "pause" | "throttle"
      throttle_pct: 50                  # only used if mode="throttle"
      apply_to: "ad"                    # "ad" | "adset"
      # When to *exit* pause/throttle (any satisfied condition triggers ramp-up/unpause)
      unpause_rules:
        at_hour_local: 14               # shifted from 07:00 Chicago → 14:00 Amsterdam
        or_if_metrics_recover:
          ctr_recover_pct: 0.80         # >=80% of normal CTR (compare 24h vs 72h baselines)
          roas_min: 1.50
          cpa_max: 33.0
        max_pause_hours: 4              # hard ceiling, then unpause

    # Budget coordination while Testing is paused (optional)
    budget_coordination:
      redistribute_paused_budget: true
      redistribute_to: "scaling_winners"  # "scaling_winners" | "validation" | "even"
      max_redistribute_pct_of_freed: 50    # limit to 50% of freed budget
      min_increment_eur: 10               # was min_increment_usd

  validation:
    enabled: true

    schedules:
      weekdays:
        pause_hours_local: []            # Validation runs 24/7 by default
        launch_block_hours_local: []
      weekend:
        pause_hours_local: []
        launch_block_hours_local: []
      per_dow: { }

    triggers:
      use_metrics: true
      ctr_floor_pct: 0.40
      roas_min: 1.50
      cpa_max: 32.0
      require_minimums: true
      use_rolling_windows: true

    actions:
      mode: "throttle"                   # gentler approach for VALID
      throttle_pct: 70                   # throttle to 70% during weak windows
      apply_to: "adset"
      unpause_rules:
        at_hour_local: null              # rely on metric recovery instead of fixed hour
        or_if_metrics_recover:
          ctr_recover_pct: 0.90
          roas_min: 1.80
          cpa_max: 28.0
        max_pause_hours: 3

    budget_coordination:
      redistribute_paused_budget: false  # usually keep VALID spend stable

  scaling:
    enabled: true

    schedules:
      weekdays:
        pause_hours_local: []            # Scaling runs 24/7 by default
        launch_block_hours_local: []
      weekend:
        pause_hours_local: []
        launch_block_hours_local: []
      per_dow: { }

    triggers:
      use_metrics: true
      ctr_floor_pct: 0.30
      roas_min: 1.30
      cpa_max: 35.0
      require_minimums: true
      use_rolling_windows: true

    actions:
      mode: "throttle"
      throttle_pct: 80                   # very light touch for Scaling
      apply_to: "adset"
      unpause_rules:
        at_hour_local: null
        or_if_metrics_recover:
          ctr_recover_pct: 0.95
          roas_min: 1.70
          cpa_max: 30.0
        max_pause_hours: 2

    budget_coordination:
      redistribute_paused_budget: false

# -------------------------
# Engine behavior specifics
# -------------------------
engine:
  # Evaluation cadence for dayparting runner (cron/scheduler will call your tick; this is just a hint)
  evaluation_minutes: 15

  # Idempotency & stability
  consecutive_ticks_required: 2         # must see the same decision twice before acting
  cooloff_minutes_after_action: 30      # don’t act again on the same entity within this window

  # Entities to target (filters the set before evaluation)
  scope:
    require_stage_prefix: true
    include_status: ["ACTIVE"]          # consider only currently active entities
    exclude_recent_losers_days: 7       # skip entities recently killed/paused for 7 days

  # What to do if everything ends up paused (safety)
  if_all_paused:
    auto_unpause_best_entity: true
    best_by: "roas"                     # "roas" | "cpa" | "purchases"
    lookback_hours: 72

# -------------------------
# Reporting & digests
# -------------------------
reporting:
  digest:
    enabled: true
    time_local: "08:45"                 # post a single summary each morning (Europe/Amsterdam)
    include_tables: true
    include_examples: true
  export:
    csv_enabled: true
    csv_path: "data/dayparting_digest.csv"
  fields_in_digest:
    - stage
    - action
    - entities
    - window_desc
    - ctr
    - roas
    - cpa
    - reason
