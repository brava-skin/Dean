name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run syntax check
      run: |
        python -m py_compile src/main.py
        python -m py_compile src/meta_client.py
        python -m py_compile src/rules.py
        python -m py_compile src/storage.py
        python -m py_compile src/slack.py
        python -m py_compile src/utils.py
        python -m py_compile src/metrics.py

    - name: Run import tests
      run: |
        python -c "
        try:
            from src.main import main
            from src.meta_client import MetaClient
            from src.rules import RuleEngine
            from src.storage import Store
            from src.slack import notify
            from src.utils import now_local
            print('✅ All imports successful')
        except ImportError as e:
            print(f'❌ Import error: {e}')
            exit(1)
        "

    - name: Run tests
      run: |
        if [ -f "test_*.py" ] || [ -d "tests" ]; then
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
        else
          echo "No tests found, skipping test execution"
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy

    - name: Run Black
      run: black --check src/ tests/

    - name: Run isort
      run: isort --check-only src/ tests/

    - name: Run Flake8
      run: flake8 src/ tests/

    - name: Run MyPy
      run: mypy src/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety

    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "Bandit report generated"
          # Check for high/critical issues
          high_issues=$(jq -r '.[] | select(.issue_severity == "HIGH" or .issue_severity == "MEDIUM") | .test_name' bandit-report.json | wc -l)
          echo "High/Medium issues found: $high_issues"
          if [ "$high_issues" -gt 0 ]; then
            echo "Security issues found - check bandit-report.json"
            exit 1
          fi
        fi

    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        if [ -f safety-report.json ]; then
          echo "Safety report generated"
          vuln_count=$(jq -r 'length' safety-report.json)
          echo "Vulnerabilities found: $vuln_count"
          if [ "$vuln_count" -gt 0 ]; then
            echo "Security vulnerabilities found - check safety-report.json"
            exit 1
          fi
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
        retention-days: 30

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Automated Release
          
          This is an automated release created by the CI/CD pipeline.
          
          ### Changes:
          - Automated dependency updates
          - Security patches
          - Bug fixes
          
          ### Artifacts:
          - Source distribution (sdist)
          - Wheel distribution
          
          ### Installation:
          ```bash
          pip install dist/*.whl
          ```
        draft: false
        prerelease: false

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/
        asset_name: dean-dist
        asset_content_type: application/zip
