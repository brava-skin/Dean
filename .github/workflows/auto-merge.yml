name: Auto-Merge Dependencies

on:
  pull_request:
    types: [opened, synchronize]
    branches: [ main, master ]

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: |
      github.actor == 'dependabot[bot]' || 
      github.actor == 'renovate[bot]' ||
      (contains(github.event.pull_request.labels.*.name, 'dependencies') && 
       contains(github.event.pull_request.labels.*.name, 'automated'))
    
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run basic tests
      run: |
        # Basic syntax check
        python -m py_compile src/main.py
        python -m py_compile src/meta_client.py
        python -m py_compile src/rules.py
        python -m py_compile src/storage.py
        python -m py_compile src/slack.py
        python -m py_compile src/utils.py
        python -m py_compile src/metrics.py
        
        # Check imports
        python -c "
        try:
            from src.main import main
            from src.meta_client import MetaClient
            from src.rules import RuleEngine
            from src.storage import Store
            from src.slack import notify
            from src.utils import now_local
            print('‚úÖ All imports successful')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            exit(1)
        "

    - name: Run security check
      run: |
        pip install safety
        safety check --json --output safety-check.json || true
        
        # Check for critical vulnerabilities
        if [ -f safety-check.json ]; then
          critical_count=$(jq -r '.[] | select(.severity == "critical") | .package' safety-check.json | wc -l)
          high_count=$(jq -r '.[] | select(.severity == "high") | .package' safety-check.json | wc -l)
          
          if [ "$critical_count" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found - blocking auto-merge"
            exit 1
          fi
          
          if [ "$high_count" -gt 0 ]; then
            echo "‚ö†Ô∏è High severity vulnerabilities found - manual review required"
            exit 1
          fi
          
          echo "‚úÖ No critical or high severity vulnerabilities found"
        fi

    - name: Check if PR is ready for auto-merge
      id: check-ready
      run: |
        # Check if PR has required labels
        if [[ "${{ github.event.pull_request.labels.*.name }}" == *"dependencies"* ]] && 
           [[ "${{ github.event.pull_request.labels.*.name }}" == *"automated"* ]]; then
          echo "ready=true" >> $GITHUB_OUTPUT
        else
          echo "ready=false" >> $GITHUB_OUTPUT
        fi

    - name: Auto-merge PR
      if: steps.check-ready.outputs.ready == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          // Check if PR is mergeable
          if (pr.mergeable === true && pr.mergeable_state === 'clean') {
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: 'squash',
                commit_title: `üîÑ Auto-merge: ${pr.title}`,
                commit_message: `Automated merge of dependency updates\n\n- All tests passed\n- No critical security vulnerabilities\n- Ready for deployment`
              });
              
              console.log('‚úÖ PR auto-merged successfully');
            } catch (error) {
              console.log('‚ùå Auto-merge failed:', error.message);
              throw error;
            }
          } else {
            console.log('‚è≥ PR not ready for merge:', pr.mergeable_state);
            throw new Error(`PR not ready for merge: ${pr.mergeable_state}`);
          }

    - name: Notify on Slack
      if: always() && env.SLACK_WEBHOOK_URL
      run: |
        if [ "${{ steps.check-ready.outputs.ready }}" == "true" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"‚úÖ Dean Dependencies Auto-Merged: ${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.pull_request.number }}\"}" \
            ${{ env.SLACK_WEBHOOK_URL }}
        else
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"‚è≥ Dean Dependencies Pending Review: ${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.pull_request.number }}\"}" \
            ${{ env.SLACK_WEBHOOK_URL }}
        fi
