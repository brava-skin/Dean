name: Dean ML-Enhanced Automation

on:
  schedule:
    # Micro-batches to reduce API spike and prevent UI interference
    # Spread across the hour to avoid overwhelming Meta's API
    - cron: '7 * * * *'   # 07 minutes past hour
    - cron: '17 * * * *'  # 17 minutes past hour  
    - cron: '27 * * * *'  # 27 minutes past hour
    - cron: '37 * * * *'  # 37 minutes past hour
    - cron: '47 * * * *'  # 47 minutes past hour
    - cron: '57 * * * *'  # 57 minutes past hour
  workflow_dispatch: # Allow manual triggering

jobs:
  dean-ml-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Increased for ML processing
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        cd dean
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test ML system
      run: |
        cd dean
        python -c "
        import xgboost as xgb
        import sklearn
        import pandas as pd
        import numpy as np
        print('‚úÖ ML packages ready')
        "

    - name: Setup ML system
      run: |
        cd dean
        echo "üß† ML system initialization..."
        python -c "
        try:
            from src.ml_intelligence import create_ml_system
            print('‚úÖ ML Intelligence ready')
        except Exception as e:
            print(f'‚ö†Ô∏è ML Intelligence: {e}')
        "

    - name: Run Dean ML-Enhanced Automation
      env:
        # Meta API Credentials
        FB_APP_ID: ${{ secrets.FB_APP_ID }}
        FB_APP_SECRET: ${{ secrets.FB_APP_SECRET }}
        FB_ACCESS_TOKEN: ${{ secrets.FB_ACCESS_TOKEN }}
        FB_AD_ACCOUNT_ID: ${{ secrets.FB_AD_ACCOUNT_ID }}
        FB_PIXEL_ID: ${{ secrets.FB_PIXEL_ID }}
        FB_PAGE_ID: ${{ secrets.FB_PAGE_ID }}
        
        # Optional: Instagram
        IG_ACTOR_ID: ${{ secrets.IG_ACTOR_ID }}
        
        # Store Configuration
        STORE_URL: ${{ secrets.STORE_URL }}
        
        # Slack Notifications
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
        # Supabase (Required for ML mode)
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        SUPABASE_TABLE: ${{ secrets.SUPABASE_TABLE }}
        
        # Optional: Economics
        BREAKEVEN_CPA: ${{ secrets.BREAKEVEN_CPA }}
        COGS_PER_PURCHASE: ${{ secrets.COGS_PER_PURCHASE }}
        USD_EUR_RATE: ${{ secrets.USD_EUR_RATE || '1.0' }}
        
        # ML System Configuration
        ML_MODE: "true"
        ML_LEARNING_RATE: "0.1"
        ML_CONFIDENCE_THRESHOLD: "0.7"
        
      run: |
        cd dean
        echo "üöÄ Running Dean ML-Enhanced automation..."
        echo "   Mode: ML-Enhanced (default)"
        echo "   Fallback: Legacy system if ML unavailable"
        echo "   Schedule: Every hour (24 checks/day)"
        echo "   Cost: FREE (public repo = unlimited minutes)"
        echo ""
        
        # Run with ML mode (default) - will fallback to legacy if needed
        python src/main.py --profile production

    - name: Upload logs and ML data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dean-ml-logs-${{ github.run_number }}
        path: |
          dean/data/
          dean/logs/
        retention-days: 14

    - name: ML System Health Check
      if: always()
      run: |
        cd dean
        echo "üè• ML System Health Check:"
        echo "   - Checking ML system status..."
        python -c "
        try:
            import xgboost as xgb
            print('   ‚úÖ XGBoost: Ready')
        except:
            print('   ‚ö†Ô∏è XGBoost: Not available')
        
        try:
            import sklearn
            print('   ‚úÖ Scikit-learn: Ready')
        except:
            print('   ‚ö†Ô∏è Scikit-learn: Not available')
        
        try:
            import pandas as pd
            print('   ‚úÖ Pandas: Ready')
        except:
            print('   ‚ö†Ô∏è Pandas: Not available')
        "