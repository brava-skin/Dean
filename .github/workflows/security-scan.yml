name: Security Scan

on:
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep

    - name: Run Safety check
      run: |
        echo "Running safety check for known vulnerabilities..."
        safety check --json --output safety-report.json || true
        
        if [ -f safety-report.json ]; then
          echo "Safety report generated"
          cat safety-report.json
        fi

    - name: Run Bandit security linter
      run: |
        echo "Running Bandit security analysis..."
        bandit -r src/ -f json -o bandit-report.json || true
        
        if [ -f bandit-report.json ]; then
          echo "Bandit report generated"
          # Extract high/critical issues
          high_issues=$(jq -r '.[] | select(.issue_severity == "HIGH" or .issue_severity == "MEDIUM") | .test_name' bandit-report.json | wc -l)
          echo "high_issues=$high_issues" >> $GITHUB_ENV
        else
          echo "high_issues=0" >> $GITHUB_ENV
        fi

    - name: Run Semgrep security scan
      run: |
        echo "Running Semgrep security scan..."
        semgrep --config=auto --json --output=semgrep-report.json src/ || true
        
        if [ -f semgrep-report.json ]; then
          echo "Semgrep report generated"
          # Count high/critical findings
          critical_findings=$(jq -r '.results[] | select(.extra.severity == "ERROR" or .extra.severity == "WARNING") | .check_id' semgrep-report.json | wc -l)
          echo "critical_findings=$critical_findings" >> $GITHUB_ENV
        else
          echo "critical_findings=0" >> $GITHUB_ENV
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json
        retention-days: 30

    - name: Create security summary
      run: |
        echo "## Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "### Safety Check (Known Vulnerabilities)" >> security-summary.md
        if [ -f safety-report.json ]; then
          vuln_count=$(jq -r 'length' safety-report.json)
          echo "- Found $vuln_count known vulnerabilities" >> security-summary.md
        else
          echo "- No known vulnerabilities found" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "### Bandit Analysis (Code Security)" >> security-summary.md
        echo "- High/Medium severity issues: ${{ env.high_issues }}" >> security-summary.md
        
        echo "" >> security-summary.md
        echo "### Semgrep Analysis (Pattern-based Security)" >> security-summary.md
        echo "- Critical/Warning findings: ${{ env.critical_findings }}" >> security-summary.md
        
        echo "" >> security-summary.md
        echo "### Recommendations" >> security-summary.md
        echo "1. Review all security reports" >> security-summary.md
        echo "2. Address high/critical issues immediately" >> security-summary.md
        echo "3. Update dependencies with known vulnerabilities" >> security-summary.md
        echo "4. Consider implementing additional security measures" >> security-summary.md

    - name: Comment on PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Create security issue for critical findings
      if: env.high_issues > 0 || env.critical_findings > 0
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let issueBody = `## ðŸš¨ Security Issues Detected
          
          Automated security scan found potential security issues:
          
          - **Bandit Analysis**: ${{ env.high_issues }} high/medium severity issues
          - **Semgrep Analysis**: ${{ env.critical_findings }} critical/warning findings
          
          ### Immediate Action Required:
          1. Review the security reports in the workflow artifacts
          2. Address high/critical issues immediately
          3. Update code to follow security best practices
          4. Re-run security scan after fixes
          
          ### Security Reports:
          - Safety report: Available in workflow artifacts
          - Bandit report: Available in workflow artifacts  
          - Semgrep report: Available in workflow artifacts
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸš¨ Security Issues Detected - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['security', 'automated', 'needs-attention']
          });

    - name: Notify on Slack (if configured)
      if: always() && env.SLACK_WEBHOOK_URL
      run: |
        if [ "${{ env.high_issues }}" -gt 0 ] || [ "${{ env.critical_findings }}" -gt 0 ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"ðŸš¨ Dean Security Issues Found: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            ${{ env.SLACK_WEBHOOK_URL }}
        fi
